"""Utilities to calculate CBS Server billing"""

import argparse
import datetime
import os

import pandas as pd

# Storage price in dollars/TB/year
STORAGE_PRICE = 50

# Power user prices in dollars/year
FIRST_POWERUSER_PRICE = 1000
ADDITIONAL_POWERUSER_PRICE = 500


class QuarterlyStorageRecord:
    """Record describing one PI's storage use in a quarter.

    Attributes
    ----------
    pi_storage_df : DataFrame
        Dataframe containing each PI's storage information.
    quarter_end : datetime
        End of the quarter to which this record applies.
    """
    def __init__(self, pi_storage_df, quarter_end):
        self.pi_storage_df = pi_storage_df
        self.quarter_end = quarter_end

    def get_storage_start(self):
        """Get the date this PI's storage started.

        Returns
        -------
        datetime
            Date this PI's storage started.
        """
        return self.pi_storage_df["timestamp"].iloc[0]

    def get_storage_amount(self):
        """Get the amount of storage allocated to this PI.

        Returns
        -------
        float
            Amount of storage (in TB) allocated to this PI.
        """
        return self.pi_storage_df["storage"].iloc[0]

    def get_speed_code(self):
        """Get the speed code associated with this PI.

        Returns
        -------
        str
            Speed code associated with this PI.
        """
        return self.pi_storage_df["speed_code"].iloc[0]

    def calculate_storage_price(self):
        """Calculate the quarterly storage price for this PI.

        Returns
        float
            Storage price (in CAD) for this PI in this quarter.
        """
        pi_storage = self.get_storage_amount()
        return pi_storage * STORAGE_PRICE * 0.25


class QuarterlyPowerUsersRecord:
    """Record describing the power users associated with one PI.

    Attributes
    ----------
    pi_power_user_df : DataFrame
        Dataframe containing each power user associated with this PI. Should
        be generated by this module to apply the expected structure.
    quarter_end : datetime
        End of the quarter to which this record applies.
    """
    def __init__(self, pi_power_user_df, quarter_end):
        self.pi_power_user_df = pi_power_user_df
        self.quarter_end = quarter_end

    def calculate_power_users_price(self):
        """Calculate the quarter's price for this PI's power users.

        Returns
        -------
        float
            Price (in CAD) for this PI's power users this quarter.
        """
        power_user_subtotal = sum(self.pi_power_user_df.loc[:, "price"])
        return power_user_subtotal

    def enumerate_power_users(self):
        """Generate a list of power users associated with this PI.

        Returns
        -------
        list of namedtuple
            A list of namedtuples, where each namedtuple contain's the users
            start datetime, last name, and associated price in CAD, in that
            order.
        """
        return sorted(list(self.pi_power_user_df.loc[
            :,
            ["timestamp", "last_name", "fixed", "price"]].itertuples(
                index=False)),
            key=lambda x: x[0])


class QuarterlyBill:
    """Record containing all information needed to bill one PI.

    Attributes
    ----------
    pi_last_name : str
        PI's last name.
    quarterly_storage : QuarterlyStorageRecord
        Record containing PI's storage information for the quarter.
    quarter_power_users : QuarterlyPowerUsersRecord
        Record containing PI's power user information for the quarter.
    quarter_end : datetime
        End date of the quarter to be billed.
    """
    def __init__(
            self,
            pi_last_name,
            quarterly_storage,
            quarterly_power_users,
            quarter_end):
        self.pi_last_name = pi_last_name
        self.quarterly_storage = quarterly_storage
        self.quarterly_power_users = quarterly_power_users
        self.quarter_end = quarter_end

    def calculate_total(self):
        """Calculate total amount to bill this PI for the quarter.

        Returns
        -------
        float
            Price (in CAD) for the PI's CBS server usage for the quarter.
        """
        return (
            self.quarterly_storage.calculate_storage_price()
            + self.quarterly_power_users.calculate_power_users_price())

    def generate_bill_txt(self):
        """Generate a textual summary of the PI's bill.

        Returns
        -------
        str
            Text-formatted billing report.
        """
        lines = ([
            "Billing report for {}".format(self.pi_last_name),
            "Storage",
            ("Start: {}, Size: {} TB, Annual price per TB: ${:.2f}, "
                + "Quarterly Price: ${:.2f}").format(
                self.quarterly_storage.get_storage_start().date(),
                self.quarterly_storage.get_storage_amount(),
                STORAGE_PRICE,
                self.quarterly_storage.calculate_storage_price()),
            "Speed code: {}, Subtotal: ${:.2f}".format(
                self.quarterly_storage.get_speed_code(),
                self.quarterly_storage.calculate_storage_price()),
            "Power Users"]
            + [(
                "Name: {}, Start: {}, Annual price: ${:.2f}, "
                + "Quarterly price: ${:.2f}").format(
                    last_name,
                    start.date(),
                    fixed,
                    price)
                for start, last_name, fixed, price in (
                    self.quarterly_power_users.enumerate_power_users())]
            + [
                "Speed code: {}, Subtotal: ${:.2f}".format(
                    self.quarterly_storage.get_speed_code(),
                    self.quarterly_power_users.calculate_power_users_price()),
                "Total: ${:.2f}".format(self.calculate_total())])
        return "\n".join(lines) + "\n"

    def save_bill_txt(self, out_path):
        """Save a textual summary of the PI's bill.

        Parameters
        ----------
        out_path : str
            Path to the file to be written.
        """
        bill_str = self.generate_bill_txt()
        with open(out_path, "w") as out_file:
            out_file.write(bill_str)


def load_user_df(user_form_path):
    """Load user Google Forms data into a usable pandas dataframe.

    Parameters
    ----------
    user_form_path : str
        Path to the excel sheet containing collected CBS server user data.

    Returns
    -------
    DataFrame
        A data frame with column names adjusted to be more usable, and the
        power user column cast to a boolean instead of a string.
    """
    user_df = pd.read_excel(user_form_path)
    user_df = user_df.rename(
        columns={
            "Timestamp": "timestamp",
            "Email Address": "email",
            "First name": "first_name",
            "Last name": "last_name",
            "PI Name": "pi_last_name",
            "Do you need your account to be a power user account? "
            + "(There is a fee associated with power user accounts.  "
            + "Check with your PI first!)":
                "power_user"})
    user_df = user_df.assign(power_user=user_df["power_user"] == "Yes")
    return user_df


def load_pi_df(pi_form_path):
    """Load PI Google Forms data into a usable pandas dataframe.

    Parameters
    ----------
    DataFrame
        A dataframe with column names adjusted to be more usable, and the PI
        power user column cast to a boolean instead of a string.
    """
    pi_df = pd.read_excel(pi_form_path)
    pi_df = pi_df.rename(
        columns={
            "Timestamp": "timestamp",
            "Email Address": "email",
            "First name": "first_name",
            "Last name": "last_name",
            "Would you like your account to be a power user account? "
            + "(There is a fee associated with power user accounts.)":
                "pi_is_power_user",
            "Speed code": "speed_code",
            "Required storage needs (in TB)": "storage"})
    pi_df = pi_df.assign(pi_is_power_user=pi_df["pi_is_power_user"] == "Yes")
    return pi_df


def add_pis_to_user_df(pi_df, user_df):
    """Add PI user accounts to the user dataframe.

    PI user account information is stored in the PI Google Forms data by
    default, but is easier to work with if it's grouped with the other user
    account data.

    Parameters
    ----------
    pi_df : DataFrame
        Data frame including PI storage and PI account power user information.
    user_df : DataFrame
        Data frame including user account information.

    Returns
    -------
    DataFrame
        User dataframe with rows describing PI user accounts appended to the
        end.
    """
    pi_user_df = pi_df.loc[
        :,
        ["timestamp", "email", "first_name", "last_name", "pi_is_power_user"]]
    pi_user_df = pi_user_df.assign(pi_last_name=pi_user_df["last_name"])
    pi_user_df = pi_user_df.rename(
        columns={
            "pi_is_power_user": "power_user"})
    return pd.concat([user_df, pi_user_df], ignore_index=True)


def assemble_bill(pi_df, user_df, pi_lastname, quarter_end):
    """Assemble one quarter's billing data for a single PI.

    Parameters
    ----------
    pi_df : DataFrame
        PI data frame, with each PI's storage space and speed code included.
    user_df : DataFrame
        User data frame, with PI user accounts included.
    pi_lastname : str
        Last name of the PI to bill.
    quarter_end : datetime
        End date of the quarter for which the bill is being assembled.

    Returns
    -------
    QuarterlyBill
        Object with all the quarter's billing information for the PI included.
    """
    pi_row = pi_df.loc[pi_df["last_name"] == pi_lastname, :]
    pi_timestamp = pi_row["timestamp"].iloc[0]
    if pi_timestamp > quarter_end:
        print("No PI storage this quarter.")
        return None
    pi_row = pi_row.assign(
        fixed=STORAGE_PRICE,
        quarterly=0.25)
    pi_row = pi_row.assign(
        price=pi_row["storage"] * pi_row["fixed"] * pi_row["quarterly"])
    storage_record = QuarterlyStorageRecord(pi_row, quarter_end)

    pi_users = user_df.loc[user_df["pi_last_name"] == pi_lastname, :]
    pi_users = pi_users.loc[pi_users["timestamp"] < quarter_end, :]
    pi_power_users = pi_users.loc[pi_users["power_user"], :]
    pi_power_users = pi_power_users.sort_values(by="timestamp")
    pi_power_users.index = range(len(pi_power_users))
    pi_power_users = pi_power_users.assign(
        fixed=pi_power_users.index.map(user_price_by_index),
        quarterly=0.25)
    pi_power_users = pi_power_users.assign(
        price=pi_power_users["fixed"] * pi_power_users["quarterly"])
    power_user_record = QuarterlyPowerUsersRecord(
        pi_power_users,
        quarter_end)

    return QuarterlyBill(
        pi_lastname,
        storage_record,
        power_user_record,
        quarter_end)


def user_price_by_index(index):
    """Calculate price for a user based on their (zero-)index.

    The first power user used by a PI is priced differently than additional
    power users. This function facilitates showing that price difference on a
    bill.

    Parameters
    ----------
    index : int
        Zero-index of the user in question.

    Returns
    -------
    float
        Price (in CAD) of the power user account.
    """
    if index <= 0:
        return FIRST_POWERUSER_PRICE
    return ADDITIONAL_POWERUSER_PRICE


def preprocess_forms(pi_path, user_path):
    """Load Google Forms data and rearrange it.

    Specifically, this loads both relevant sheets and adds PI accounts to the
    users table.

    Parameters
    ----------
    pi_path : str
        Path to the PI form data
    user_path : str
        Path to the user form data

    Returns
    -------
    tuple of DataFrame
        A tuple containing the resulting PI data frame then the user data
        frame.
    """
    pi_df = load_pi_df(pi_path)
    user_df = load_user_df(user_path)
    user_df = add_pis_to_user_df(pi_df, user_df)

    return (pi_df, user_df)


def generate_all_pi_bills(pi_path, user_path, quarter_end_iso, out_dir):
    """Loop through all PIs and save a bill for each.

    Parameters
    ----------
    pi_path : str
        Path to the PI form data.
    user_path : str
        Path to the user form data.
    quarter_end_iso : str
        ISO formatted end date of the billing quarter.
    out_dir : str, optional
        Directory into which to output bill text files.
    """
    pi_df, user_df = preprocess_forms(pi_path, user_path)
    quarter_end = datetime.datetime.fromisoformat(quarter_end_iso)

    for pi_last_name in pi_df.loc[:, "last_name"]:
        out_file = os.path.join(out_dir, "pi-{}_quarter-{}_bill.txt".format(
            pi_last_name,
            quarter_end_iso))
        pi_bill = assemble_bill(pi_df, user_df, pi_last_name, quarter_end)

        pi_bill.save_bill_txt(out_file)


def generate_pi_bill(pi_path,
                     user_path,
                     pi_last_name,
                     quarter_end_iso,
                     out_file=None):
    """Open data files and produce a report for one PI.

    Parameters
    ----------
    pi_path : str
        Path to the PI form data.
    user_path : str
        Path to the user form data.
    pi_last_name : str
        Last name of the PI to bill.
    quarter_end_iso : str
        ISO formatted end date of the billing quarter.
    out_file : str, optional
        Path to output text file.
    """
    pi_df, user_df = preprocess_forms(pi_path, user_path)

    quarter_end = datetime.datetime.fromisoformat(quarter_end_iso)

    pi_bill = assemble_bill(pi_df, user_df, pi_last_name, quarter_end)

    if out_file is not None:
        pi_bill.save_bill_txt(out_file)
        return

    print(pi_bill.generate_bill_txt(), end="")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Process CBS Server billing data.")
    parser.add_argument("pi_form", type=str, help="path to the PI form data")
    parser.add_argument("user_form",
                        type=str,
                        help="path to the user form data")
    parser.add_argument("quarter_end",
                        type=str,
                        help="last day of the quarter to bill")
    parser.add_argument("out_dir",
                        type=str,
                        help="directory into which to output bill files")

    args = parser.parse_args()
    generate_all_pi_bills(
        args.pi_form,
        args.user_form,
        args.quarter_end,
        args.out_dir)
